---
- name: php 8.1
  block:
      - name: apt signing key php 8.1
        apt_key:
            url: https://packages.sury.org/php/apt.gpg
            state: present
        tags: php-key
      - name: add apt repository php 8.1
        apt_repository:
            repo: deb https://packages.sury.org/php/ bullseye main
        tags: php-repo
      - name: update cache
        apt:
            update_cache: yes
      - name: install php 8.1
        apt:
            name: "{{ packages }}"
            state: latest
        vars:
            packages:
                - php8.1-cli
                - php8.1-fpm
                - php8.1-zip
        tags: php-install
        debugger: on_failed
        notify: restart phpfpm
  tags: php

- name: composer
  block:
      - name: remove composer
        file:
            path: /bin/composer
            state: absent
      - name: install composer
        shell: curl -sS https://getcomposer.org/installer | php -- --install-dir=/bin --filename=composer
        args:
            creates: /bin/composer
        #shell: /tmp/installer | php -- --install-dir=/bin --filename=composer --quiet
  debugger: on_failed
  tags: composer

- name: project
  block:
      - name: added system user
        ansible.builtin.user:
            name: starter
            comment: Starter
            uid: 1001
            groups: www-data
            append: yes
        tags: add-user
      - name: creates directory
        file:
            path: /var/www/starter
            state: directory
            owner: starter
            recurse: yes
            group: starter
        tags: create-directory
      - name: git clone
        ansible.builtin.git:
            repo: https://github.com/LexusAlex/starter.git
            dest: /var/www/starter
            update: no
        become: true
        become_user: starter
        tags: git-clone
  debugger: on_failed
  tags: project

- name: nginx
  block:
      - name: added PGP-key
        apt_key:
            url: https://nginx.org/keys/nginx_signing.key
            state: present
        tags: nginx-key
      - name: add repo nginx
        apt_repository:
            repo: deb https://nginx.org/packages/mainline/debian/ bullseye nginx
            state: present
      - name: add repo nginx src
        apt_repository:
            repo: deb-src https://nginx.org/packages/mainline/debian/ bullseye nginx
            state: present
      - name: install nginx
        apt:
            name: nginx
            update_cache: yes
            state: present
      - name: start nginx
        service:
            name: nginx
            state: started
      - name: replace nginx configuration
        template:
            src: '{{ item.src }}'
            dest: '{{ item.dest }}'
        loop:
            - { src: 'templates/nginx/default.conf', dest: '/etc/nginx/conf.d/default.conf' }
            - { src: 'templates/nginx/nginx.conf', dest: '/etc/nginx/nginx.conf' }
        notify: reload nginx
        tags: replace-nginx
  debugger: on_failed
  tags: nginx

- name: mysql
  block:
      - name : add apt key
        apt_key:
            keyserver: keyserver.ubuntu.com
            id: 467B942D3A79BD29
        tags: mysql-key
      - name: add repository mysql
        apt_repository:
            repo: deb http://repo.mysql.com/apt/debian/ bullseye mysql-8.0 main
            update_cache: yes
        tags: mysql-repo
      - name: install mysql server
        apt:
            name: mysql-server
            update_cache: yes
            state: latest
        tags: mysql-install
      - name: module mysql-python install
        apt:
            name: python3-mysqldb
            state: latest
        tags: mysql-deps
      - name: add my.cnf
        template:
            src: "mysql/.my.cnf"
            dest: "/root/.my.cnf"
            owner: root
            group: root
            mode: 0600
        tags: mysql-conf
      - name: mysql set root password
        mysql_user:
            check_implicit_admin: yes
            name: 'root'
            password: '{{ mysql_root_password }}'
            host: 'localhost'
            priv: '*.*:ALL,GRANT'
        tags: mysql-change-root
      - name: create application user
        mysql_user:
            state: present
            name: '{{ mysql_application_user }}'
            password: '{{ mysql_application_password }}'
            priv:
                '{{ mysql_application_db }}.*:ALL,GRANT'
        tags: mysql_app_user
      - name: create databse
        mysql_db:
            name: '{{ mysql_application_db }}'
            state: present
        tags: mysql_app_db
  debugger: on_failed
  tags: mysql

- name: env
  block:
      - name: add path is php fpm
        blockinfile:
          path: /etc/php/8.1/fpm/pool.d/www.conf
          backup: yes
          marker: ;{mark}
          block: |
            include=/usr/local/etc/php-fpm.d/*.conf
        tags: env_include_path
      - name: add directory
        file:
          path: /usr/local/etc/php-fpm.d
          state: directory
          recurse: yes
        tags: env_directory
      - name: add empty file to env
        file:
            path: /usr/local/etc/php-fpm.d/{{ vars_file }}.conf
            state: touch
        tags: env_file
      - name: copy content
        copy:
            dest: /usr/local/etc/php-fpm.d/{{ vars_file }}.conf
            content: |
                env[MYSQL_USER] = {{ mysql_application_user }}
                env[MYSQL_PASSWORD] = {{ mysql_application_password }}
                env[MYSQL_DATABASE] = {{ mysql_application_db }}
                env[MYSQL_CHARSET] = utf8
                env[APPLICATION_ENV] = {{ application_env }}
        tags: env_file
  notify: restart phpfpm
  tags: env

- name: deploy
  block:
      - name: git pull latest changes
        become: true
        become_user: starter
        shell: git pull origin main
        args:
            chdir: "/var/www/starter/"
      - name: composer install
        become: true
        become_user: starter
        shell: composer install --no-dev --optimize-autoloader
        args:
            chdir: "/var/www/starter/"
      #  register: out
      #- debug:
            #msg: "{{ out.stdout }}"
      #      var: out
  debugger: on_failed
  tags: deploy

